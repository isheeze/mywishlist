{% liquid
assign app = "app--114784174081--wishlist"
if customer
    if customer.email
        assign c_id = customer.email
    else
        assign c_id = customer.id
    endif
else
    assign c_id = "guest"
endif
%}
<script>
    /*
    1. .my-wishlistapp-count  -- display no of items in wishlist
    2. .my-wishlistapp-product-count  -- display no of addition of a product in any customer's wishlist
    3. .mywishlistapp-btn with [data-product-id]  -- trigger wishlist add/remove
        2.1. use .added for if button is active / item is added
    */
    const updateWishlist = (res) => {
        updateCounters(res)
        updateButtons(Object.values(res.wishlist))

        if(document.querySelector('#{{ app }}-wishlist-modal')){
            updateModal(Object.values(res.wishlist))
        }
    }
    const updateCounters = (data) => {
        let counters = document.querySelectorAll('.my-wishlistapp-count')
        console.log(counters)
        for(c of counters){
            c.innerHTML = Object.keys(data.wishlist).length
            if(Object.keys(data.wishlist).length){
                c.style.display = null
            }else{
                c.style.display = "none"
            }
        }
        let productCounters = document.querySelectorAll(".my-wishlistapp-product-count")
        for(c of productCounters){
            console.log(c.getAttribute("data-product-id"))
            console.log(data)
            console.log(data.allProducts[c.getAttribute("data-product-id")])
            c.innerHTML = data.allProducts[c.getAttribute("data-product-id")] || 0
            c.style.display = data.allProducts[c.getAttribute("data-product-id")] ? null : "none"
        }
    }
    const updateButtons = (wishlist) => {
        let btns = document.querySelectorAll('.mywishlistapp-btn')
        for(btn of btns){
            btn.classList.remove('added')
            const btnTxt = btn.querySelector(".btnTxt")
            btnTxt && (btnTxt.innerHTML = btnTxt.getAttribute("data-label"))
        }
        for(i of wishlist){
            let btns = document.querySelectorAll(`.mywishlistapp-btn[data-product-id="${i.id}"]`)
            for(btn of btns){
                btn.classList.add('added')
                const btnTxt = btn.querySelector(".btnTxt")
                btnTxt && (btnTxt.innerHTML = btnTxt.getAttribute("data-label-added"))
            }
        }
    }
    const updateModal = (wishlist) => {
        if(wishlist.length == 0){
            document.querySelector("#{{ app }}-wishlist-modal .wishlist-item-container").innerHTML = emptyState(document.querySelector("#{{ app }}-wishlist-modal").getAttribute("data-empty"))

        }else{
            const emptyState = document.querySelector("#{{ app }}-wishlist-modal .wishlist-item-container .wishlist-empty-state")
            if (emptyState) emptyState.remove()

            const cards = document.querySelectorAll("#{{ app }}-wishlist-modal .wishlist-product-card")
            const deleteElement = Array.from(cards).filter((card) => !wishlist.some((listitem) => card.querySelector('[data-product-id]').getAttribute('data-product-id') == listitem))
            deleteElement.forEach((el) => el.remove())
            const addElement = wishlist.filter((listitem) => !Array.from(cards).some((card) => card.querySelector('[data-product-id]').getAttribute('data-product-id') == listitem))
            addElementsInModal(addElement)

            console.log({deleteElement,addElement})
        }
    }

    const showResultInPopup = (wishlist) => {
        console.log(wishlist)
        if(wishlist.length == 0){
            document.querySelector("#{{ app }}-wishlist-modal .wishlist-item-container").innerHTML = emptyState(document.querySelector("#{{ app }}-wishlist-modal").getAttribute("data-empty"))
        }else{
            const emptyState = document.querySelector("#{{ app }}-wishlist-modal .wishlist-item-container .wishlist-empty-state")
            if (emptyState) emptyState.remove()

            const cards = document.querySelectorAll("#{{ app }}-wishlist-modal .wishlist-product-card")
            const deleteElement = Array.from(cards).filter((card) => !wishlist.some((listitem) => card.querySelector('[data-product-id]').getAttribute('data-product-id') == listitem))
            deleteElement.forEach((el) => el.remove())
            const addElement = wishlist.filter((listitem) => !Array.from(cards).some((card) => card.querySelector('[data-product-id]').getAttribute('data-product-id') == listitem))
            addElementsInModal(addElement)

            console.log({deleteElement,addElement})
        }
    }

    function wishlistActionClickHandler(){
        this.style.pointerEvents = "none"
        let caller = this

        var svg = ""
        var tempSvg = ""

        const formdata = new FormData()
        {% if c_id != "guest" %}
            formdata.append("customer_id", "{{ c_id }}")
        {% endif %}
        formdata.append("product_id", this.getAttribute("data-product-id"))

        if(caller.classList.contains("added")){
            formdata.append("action", "delete")
            caller.classList.remove("added")
        }else{
            formdata.append("action", "add")
            caller.classList.add("added")
        }

        if(caller.classList.contains("loader")){
            svg = this.querySelector("svg")
            tempSvg = svg.innerHTML
            svg.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99" />`
            svg.classList.add("loading")
            svg.style.fill = "none"
        }

        const requestOptions = {
        method: "POST",
        body: formdata,
        redirect: "follow"
        };

        console.log(requestOptions)
        fetch("https://timeless-tune.myshopify.com/a/q23s", requestOptions)
        .catch((error) => console.error(error))

        updateLocalStorage(formdata,(result)=>{
            if(caller.classList.contains("loader")){
                svg.innerHTML = tempSvg
                svg.classList.remove("loading")
                svg.style.fill = null
            }

            caller.style.pointerEvents = "all"
            updateWishlist(result)
        })
        
    }

    function fetchWishlistFromCustomerId(id){
        {% if c_id != "guest" %}
        const formdata = new FormData()
        formdata.append("customer_id", id)
        formdata.append("action", "fetchFromCustomer")
        
        const requestOptions = {
        method: "POST",
        body: formdata,
        redirect: "follow"
        };

        fetch("https://timeless-tune.myshopify.com/a/q23s", requestOptions)
        .then((response) => response.json())
        .then((result) => {
            showResultInPopup(result)
        }).catch((error) => console.error(error))
        {% endif %}
    }
    function cardCartHandler(){
        // loading icon
        this.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99" /></svg>`
        this.classList.add("loading")

        let formData = {
            'items': [{
                'id': this.getAttribute("data-id"),
                'quantity': 1
            }]
        };
        console.log(formData)
        fetch('/cart/add.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(response => {
            // cart icon
            this.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 0 0-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 0 0-16.536-1.84M7.5 14.25 5.106 5.272M6 20.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm12.75 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" /></svg>`
            this.classList.remove("loading")

            const img = this.closest(".wishlist-product-card").querySelector("img").src
            const title = this.closest(".wishlist-product-card").querySelector(".wishlist-product-title").innerHTML

            showNotification(img,title,"Added to cart")

            return response.json();
        })
        .catch((error) => {
            console.error('Error:', error);
        });
    }

    const emptyState = (note) => (`
        <div class="wishlist-empty-state">
            <div>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="m20.25 7.5-.625 10.632a2.25 2.25 0 0 1-2.247 2.118H6.622a2.25 2.25 0 0 1-2.247-2.118L3.75 7.5m6 4.125 2.25 2.25m0 0 2.25 2.25M12 13.875l2.25-2.25M12 13.875l-2.25 2.25M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Z" />
                </svg>
            </div>
            <div>
                ${note}
            </div>
        </div>`
    )
    const addElementsInModal = (elements) => {
        for(el of elements){
            let v_id = "#"
            for(v of el.variants.nodes){
                if(v.availableForSale){
                    v_id = v.id.replace("gid://shopify/ProductVariant/", "")
                    break
                }
            }
            let htmlString = `<div data-product-id="${el.id}" class="wishlist-product-card-close mywishlistapp-btn added loader"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                                </svg></div>
                        <a href="{{ routes.root_url }}products/${ el.handle }"><img src="${el.featuredImage.url}&amp;width=400" alt="${ el.title }" srcset="${el.featuredImage.url}&amp;width=352 352w, ${el.featuredImage.url}&amp;width=400 400w" width="400" height="400"></a>
                        <div class="wishlist-info-container">
                            <a href="{{ routes.root_url }}products/${ el.handle }">
                                <div class="wishlist-product-title">${ el.title }</div>
                                <div>${ formateCurrency(el.variants.nodes[0].price) }</div>
                            </a><div class="cart-btn" data-id="${ v_id }">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 0 0-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 0 0-16.536-1.84M7.5 14.25 5.106 5.272M6 20.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm12.75 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z" />
                                </svg>
                            </div>
                        </div>`

            const d = document.createElement("div")
            d.classList.add('wishlist-product-card')
            d.innerHTML = htmlString

            d.querySelector(".wishlist-product-card-close").addEventListener("click", wishlistActionClickHandler)
            if(v_id !== "#"){
                d.querySelector(".cart-btn").addEventListener("click", cardCartHandler)
            }
            document.querySelector("#{{ app }}-wishlist-modal .wishlist-item-container").appendChild(d)
        }
    }
    const formateCurrency = (amount) => (
        ("{{ 1 | money_with_currency }}").replace(/(\d+(\.\d+)?)/g, amount*Shopify.currency.rate)
    )

    const updateLocalStorage = (formData, callback) => {
        let productId = formData.get("product_id") || null
        let action = formData.get("action") || null
        
        const wishlist = JSON.parse(localStorage.getItem('my-wishlist-app-wishlist'))
        const result = JSON.parse(localStorage.getItem("my-wishlist-app-wishlist-products")) || {}

        console.log(wishlist)

        switch(action){
            case 'add':
                if(productId == null){ return json({"message": "Required rguments are missing..."}) }
                if(wishlist){
                    if(wishlist.wishlist){
                        if(!wishlist.wishlist.some(str => str === productId)){
                            wishlist.wishlist.push(productId)
                            wishlist.products[productId] = wishlist.products[productId] ? (wishlist.products[productId]) + 1 : 1
                        }else{
                            console.log(`already added item (${productId})`)
                        }
                    }else{
                        wishlist.wishlist = [productId]
                        wishlist.products[productId] = wishlist.products[productId] ? (wishlist.products[productId]) + 1 : 1
                    }
                }else{
                    wishlist = {
                        "wishlist":[
                            productId
                        ],
                        "products":{
                            [productId]:1
                        }
                    }
                }
                const product = document.querySelector(".mywishlistapp-btn[data-product-title]")
                result[productId] = {
                    "id": productId,
                    "title": product.getAttribute("data-product-title"),
                    "handle": product.getAttribute("data-product-handle"),
                    "featuredImage":{
                        "url": product.getAttribute("data-product-featruredImage")
                    },
                    "variants":{
                        "nodes":[{
                            "availableForSale": product.getAttribute("data-product-available"),
                            "id": product.getAttribute("data-product-variantId"),
                            "price": product.getAttribute("data-product-variantPrice")
                        }]
                    }
                }

                showNotification(result[productId].featuredImage.url,result[productId].title,"Added to the wishList")
                break;

            case 'delete':
                if(productId == null){ return json({"message": "Required rguments are missing..."}) }
                console.log("delete action")
                if(wishlist){
                    console.log("if 1")
                    if(wishlist.wishlist){
                        console.log("if 2")
                        if(wishlist.wishlist.some(str => str === productId)){
                            console.log("if 3")
                            wishlist.wishlist = wishlist.wishlist.filter(e => e !== productId)
                            showNotification(result[productId].featuredImage.url,result[productId].title,"Removed from the wishList")
                            delete result[productId]
                        }else{
                            console.log(`product is not it the list`)
                        }
                    }else{
                        console.log("customer have 0 items in wishlist")
                    }
                }else{
                    console.log("There is no item in our wishlist")
                }
            break;
        }

        console.log(wishlist)
        console.log(result)

        localStorage.setItem('my-wishlist-app-wishlist',JSON.stringify(wishlist || {}))
        localStorage.setItem('my-wishlist-app-wishlist-products',JSON.stringify(result || {}))

        if (callback && (typeof callback == "function")) {
            let res = {}
            res.wishlist = result
            res.allProducts = wishlist.products
            callback(res);   
        }
    }

    function notificationCloseHandler(){
        this.closest(".my-wishlist-app-notification").classList.remove("show")
    }
    const showNotification = (img, title, description) => {
        const notificationDiv = document.createElement('div')
        notificationDiv.classList.add("my-wishlist-app-notification")

        notificationDiv.innerHTML = `
        <div class="my-wishlist-app-notification-close-btn">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
            </svg>
        </div>
        <div class="my-wishlist-app-notification-img-container">
            <img src="${img}" alt="${title}">
        </div>
        <div class="my-wishlist-app-notification-details">
            <div class="my-wishlist-app-notification-title">${title}</div>
            <div>${description}</div>
        </div>
        `
        notificationDiv.querySelector(".my-wishlist-app-notification-close-btn").addEventListener("click",notificationCloseHandler)
        document.querySelector("body").append(notificationDiv)
        setTimeout(() => {
            notificationDiv.classList.add("show")
        }, 0);
        setTimeout(() => {
            notificationDiv.classList.remove("show")
        }, 3000);
        setTimeout(() => {
            notificationDiv.remove()
        }, 3500);
    }
</script>
<style>
    .my-wishlist-app-notification{
        position: fixed;
        top: 50px;
        right: -400px;
        z-index: 999999;
        background: rgb(255 255 255 / 60%);
        max-width: 400px;
        backdrop-filter: blur(10px);
        display: flex;
        align-items: center;
        padding: 10px;
        border: 1px solid rgb(193 193 193 / 70%);
        gap: 10px;
        border-radius: 18px;
        box-shadow: 0px 2px 15px -10px;
        transition: all .5s;
    }
    .my-wishlist-app-notification.show{
        right: 50px;
    }
    .my-wishlist-app-notification-close-btn{
        position: absolute;
        top: 10px;
        right: 10px;
        cursor: pointer;
    }
    .my-wishlist-app-notification-close-btn > svg{
        width: 20px;
    }
    .my-wishlist-app-notification-img-container{
        width: 100px;
        height: 100px;
        flex: none;
    }
    .my-wishlist-app-notification-img-container img{
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 10px;
    }
    .my-wishlist-app-notification-title{
        font-weight: bold;
    }
    .my-wishlist-app-notification-details{
        padding: 10px;
    }
</style>